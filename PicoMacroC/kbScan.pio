.program KB_SCAN

; Allow the control of WS2812 LEDs using PIO for more efficiency

.define public NumBtns 4

.side_set 4

.wrap_target
    in pins, NumBtns      side 1
    in pins, NumBtns      side 2
    in pins, NumBtns      side 4
    in pins, NumBtns      side 8
.wrap

% c-sdk {

// Helper function (for use in C program) to initialize this PIO program
static inline void kb_program_init(PIO pio, uint sm, uint offset, uint inStartPin, uint outStartPin, uint inPinCount, uint outPinCount, float freq, int systemClock) {

    // Sets up state machine and wrap target. This function is automatically generated
    pio_sm_config c = KB_SCAN_program_get_default_config(offset);
    // Set GPIO pin as Output
    pio_sm_set_consecutive_pindirs(pio, sm, outStartPin, outPinCount, true);
    // set sideset pin
    sm_config_set_sideset_pins(&c, outStartPin);
    // set the output FIFO shift in size
    sm_config_set_in_shift(&c, false, true, inPinCount * outPinCount);
    // since we don't return any value back to the CPU we can set he FIFO to be just input
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    // set the cock frequency
    float div = systemClock / (freq * 4);
    sm_config_set_clkdiv(&c, div);
    // start the PIO instance
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

%}